// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bank;

#nullable disable

namespace bank.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240718044158_complete table")]
    partial class completetable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("bank.Models.BankDetailsViewModel", b =>
                {
                    b.Property<Guid>("bank_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("account_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bank_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("currency_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("bank_id");

                    b.HasIndex("currency_id");

                    b.ToTable("bankdetails", (string)null);
                });

            modelBuilder.Entity("bank.Models.CurrencyViewModel", b =>
                {
                    b.Property<Guid>("currency_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("currency_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("currency_id");

                    b.ToTable("currencies", (string)null);
                });

            modelBuilder.Entity("bank.Models.DealerViewModel", b =>
                {
                    b.Property<Guid>("dealer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("dealer_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("party_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("dealer_id");

                    b.HasIndex("party_id");

                    b.ToTable("dealers", (string)null);
                });

            modelBuilder.Entity("bank.Models.FiscalYearViewModel", b =>
                {
                    b.Property<Guid>("fiscal_year_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("end_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fs_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fs_year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("start_date")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("fiscal_year_id");

                    b.ToTable("fiscalyear", (string)null);
                });

            modelBuilder.Entity("bank.Models.ForexButSellDealsViewModel", b =>
                {
                    b.Property<Guid>("forex_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("authorized_by")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("authorized_signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("back_office_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("back_office_remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("back_office_signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("buyer_banker_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("buyer_currency_amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("buyer_currency_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("buyer_send_bank_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("counter_party_dealer_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("creator")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("deal_date_time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("dealer_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("dealer_signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("exchange_rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("fiscal_year_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("mid_office_date_time")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("mid_office_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("mid_office_remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mid_office_signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("mod_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("our_dealer_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("party_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("reference_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("seller_banker_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("seller_currency_amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("seller_currency_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("value_date_time")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("verified_by")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("verified_signature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("forex_id");

                    b.HasIndex("authorized_by");

                    b.HasIndex("buyer_currency_id");

                    b.HasIndex("dealer_id");

                    b.HasIndex("fiscal_year_id");

                    b.HasIndex("mod_id");

                    b.HasIndex("party_id");

                    b.ToTable("forexbutselldeals", (string)null);
                });

            modelBuilder.Entity("bank.Models.GroupNameViewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("created_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("group_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("GroupNames", (string)null);
                });

            modelBuilder.Entity("bank.Models.MessageInfoViewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("created_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("creator_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("message_body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("parent_message_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageInfos", (string)null);
                });

            modelBuilder.Entity("bank.Models.MessageRecipentViewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("message_info_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("recipent_group_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("recipent_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("message_info_id");

                    b.HasIndex("recipent_group_id");

                    b.HasIndex("recipent_id");

                    b.ToTable("MessageRecipents", (string)null);
                });

            modelBuilder.Entity("bank.Models.ModeOfDealViewModel", b =>
                {
                    b.Property<Guid>("mod_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("deal_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mod_id");

                    b.ToTable("modeofdeals", (string)null);
                });

            modelBuilder.Entity("bank.Models.PartyBankDetailsViewModel", b =>
                {
                    b.Property<Guid>("party_bank_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("bank_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("party_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("party_bank_id");

                    b.HasIndex("bank_id");

                    b.HasIndex("party_id");

                    b.ToTable("partybankdetails", (string)null);
                });

            modelBuilder.Entity("bank.Models.PartyViewModel", b =>
                {
                    b.Property<Guid>("party_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("party_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("party_id");

                    b.ToTable("parties", (string)null);
                });

            modelBuilder.Entity("bank.Models.RoleViewModel", b =>
                {
                    b.Property<Guid>("role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("role_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("role_id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("bank.Models.UserGroupViewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("created_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("group_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("group_id");

                    b.HasIndex("user_id");

                    b.ToTable("UserGroups", (string)null);
                });

            modelBuilder.Entity("bank.Models.UserInformationViewModel", b =>
                {
                    b.Property<Guid>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.ToTable("UserInformations", (string)null);
                });

            modelBuilder.Entity("bank.Models.BankDetailsViewModel", b =>
                {
                    b.HasOne("bank.Models.CurrencyViewModel", "currency")
                        .WithMany("bankdetails")
                        .HasForeignKey("currency_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("currency");
                });

            modelBuilder.Entity("bank.Models.DealerViewModel", b =>
                {
                    b.HasOne("bank.Models.PartyViewModel", "party")
                        .WithMany("dealer")
                        .HasForeignKey("party_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("party");
                });

            modelBuilder.Entity("bank.Models.ForexButSellDealsViewModel", b =>
                {
                    b.HasOne("bank.Models.UserInformationViewModel", "userinformation")
                        .WithMany("ForexBuySellDeals")
                        .HasForeignKey("authorized_by")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("bank.Models.CurrencyViewModel", "currency")
                        .WithMany("ForexBuySellDeals")
                        .HasForeignKey("buyer_currency_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bank.Models.DealerViewModel", "Dealer")
                        .WithMany("ForexBuySellDeals")
                        .HasForeignKey("dealer_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bank.Models.FiscalYearViewModel", "FiscalYear")
                        .WithMany("ForexBuySellDeals")
                        .HasForeignKey("fiscal_year_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bank.Models.ModeOfDealViewModel", "modeofdeal")
                        .WithMany("ForexBuySellDeals")
                        .HasForeignKey("mod_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bank.Models.PartyViewModel", "party")
                        .WithMany("ForexBuySellDeals")
                        .HasForeignKey("party_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dealer");

                    b.Navigation("FiscalYear");

                    b.Navigation("currency");

                    b.Navigation("modeofdeal");

                    b.Navigation("party");

                    b.Navigation("userinformation");
                });

            modelBuilder.Entity("bank.Models.MessageRecipentViewModel", b =>
                {
                    b.HasOne("bank.Models.MessageInfoViewModel", "messageInfo")
                        .WithMany("MessageRecipents")
                        .HasForeignKey("message_info_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bank.Models.GroupNameViewModel", "groupName")
                        .WithMany("MessageRecipents")
                        .HasForeignKey("recipent_group_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bank.Models.UserInformationViewModel", "userInformation")
                        .WithMany("MessageRecipents")
                        .HasForeignKey("recipent_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("groupName");

                    b.Navigation("messageInfo");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("bank.Models.PartyBankDetailsViewModel", b =>
                {
                    b.HasOne("bank.Models.BankDetailsViewModel", "bank")
                        .WithMany("party_bank")
                        .HasForeignKey("bank_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bank.Models.PartyViewModel", "party")
                        .WithMany("party_bank")
                        .HasForeignKey("party_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("bank");

                    b.Navigation("party");
                });

            modelBuilder.Entity("bank.Models.UserGroupViewModel", b =>
                {
                    b.HasOne("bank.Models.GroupNameViewModel", "groupName")
                        .WithMany("UserGroups")
                        .HasForeignKey("group_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bank.Models.UserInformationViewModel", "userInformation")
                        .WithMany("UserGroups")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("groupName");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("bank.Models.BankDetailsViewModel", b =>
                {
                    b.Navigation("party_bank");
                });

            modelBuilder.Entity("bank.Models.CurrencyViewModel", b =>
                {
                    b.Navigation("ForexBuySellDeals");

                    b.Navigation("bankdetails");
                });

            modelBuilder.Entity("bank.Models.DealerViewModel", b =>
                {
                    b.Navigation("ForexBuySellDeals");
                });

            modelBuilder.Entity("bank.Models.FiscalYearViewModel", b =>
                {
                    b.Navigation("ForexBuySellDeals");
                });

            modelBuilder.Entity("bank.Models.GroupNameViewModel", b =>
                {
                    b.Navigation("MessageRecipents");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("bank.Models.MessageInfoViewModel", b =>
                {
                    b.Navigation("MessageRecipents");
                });

            modelBuilder.Entity("bank.Models.ModeOfDealViewModel", b =>
                {
                    b.Navigation("ForexBuySellDeals");
                });

            modelBuilder.Entity("bank.Models.PartyViewModel", b =>
                {
                    b.Navigation("ForexBuySellDeals");

                    b.Navigation("dealer");

                    b.Navigation("party_bank");
                });

            modelBuilder.Entity("bank.Models.UserInformationViewModel", b =>
                {
                    b.Navigation("ForexBuySellDeals");

                    b.Navigation("MessageRecipents");

                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
